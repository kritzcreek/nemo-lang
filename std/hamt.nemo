module hamt
exports (Hamt, new, get, add, remove, values, print)

use option
use vec
use string

fn print_hash(hash : U32) -> string::Str {
  let chars : vec::Vec[I32] = vec::new(0);
  let i = 0;
  while i < 32 {
    if i != 0 && u32_rem(i32_to_u32(i), 5u) == 0u {
      vec::push(chars, 95)
    } else {};
    if u32_and(hash, 1u) == 0u { vec::push(chars, 48) } else { vec::push(chars, 49) };
    set hash = u32_shr(hash, 1u);
    set i = i + 1;
  };

  let char_count = chars.len;
  let bytes = bytes_new(0, char_count);
  let j = 0;
  while j < char_count {
    bytes_set(bytes, char_count - j - 1, chars.buf[j]);
    set j = j + 1;
  };
  string::unsafe_new(bytes)
}

fn print_bitmap(bitmap : U32) -> string::Str {
  let chars : vec::Vec[I32] = vec::new(0);
  let i = 0;
  while i < 32 {
    if u32_and(bitmap, 1u) == 0u { vec::push(chars, 48) } else { vec::push(chars, 49) };
    set bitmap = u32_shr(bitmap, 1u);
    set i = i + 1;
  };

  let char_count = chars.len;
  let bytes = bytes_new(0, char_count);
  let j = 0;
  while j < char_count {
    bytes_set(bytes, char_count - j - 1, chars.buf[j]);
    set j = j + 1;
  };
  string::unsafe_new(bytes)
}

fn print[a](hamt : Hamt[a]) -> string::Str {
  print_node#[a](hamt.root)
}

fn print_node[a](node : Node[a]) -> string::Str {
  match node {
    Node::Leaf l => {
      string::concat(string::concat(string::unsafe_new("(#leaf "), print_hash(l.hash)), string::unsafe_new(")"));
    },
    Node::Mapped m => {
      let nodes = string::unsafe_new("");
      let i = 0;
      while i < array_len#[Node[a]](m.nodes) {
        set nodes = string::concat(string::concat(nodes, string::unsafe_new(" ")), print_node(m.nodes[i]));
        set i = i + 1;
      };
      string::concat(
        string::concat(
          string::concat(
            string::unsafe_new("(#mapd "),
            print_bitmap(m.bitmap)),
          nodes),
        string::unsafe_new(")"));
    },
  };
}

struct Hamt[a] {
  root : Node::Mapped[a],
  size : I32,
}

variant Node[a] {
  struct Mapped { bitmap : U32, nodes : Array[Node[a]] },
  struct Leaf { hash : U32, value : a },
}

fn new[a]() -> Hamt[a] {
  Hamt { root = Node::Mapped { bitmap = 0u, nodes = [] }, size = 0 }
}

fn get[a](hamt : Hamt[a], hash : U32) -> option::Option[a] {
  match get_with_anchor(hamt.root, 0u, hash).payload {
    GetResultPayload::Success s => {
      option::Option::Some { val = s.node.value }
    },
    GetResultPayload::Missing _ => { option::Option::None {} },
    GetResultPayload::Conflict _ => { option::Option::None {} },
  };
}

fn add[a](hamt : Hamt[a], hash : U32, value : a) -> option::Option[a] {
  let get_result = get_with_anchor(hamt.root, 0u, hash);
  match get_result.payload {
    GetResultPayload::Missing _ => {
      set hamt.size = hamt.size + 1;
      let n = get_result.anchor;
      let pos = bitpos(hash, get_result.shift);
      set n.bitmap = u32_or(n.bitmap, pos);
      let ix = index(n.bitmap, pos);
      set n.nodes = insert_node(n.nodes, ix, Node::Leaf { hash = hash, value = value });
      option::Option::None {};
    },
    GetResultPayload::Conflict c => {
      set hamt.size = hamt.size + 1;
      let n = get_result.anchor;
      let pos = bitpos(hash, get_result.shift);
      let ix = index(n.bitmap, pos);
      let new_node = merge_leafs(get_result.shift + 5u, c.node, hash, value);
      set n.nodes[ix] = new_node;
      option::Option::None {};
    },
    GetResultPayload::Success s => {
      let prev = s.node.value;
      set s.node.value = value;
      option::Option::Some { val = prev };
    },
  };
}

fn remove[a](hamt : Hamt[a], hash : U32) -> option::Option[a] {
  match remove_rec(hamt.root, 0u, hash) {
    RemoveResult::Success s => {
      set hamt.size = hamt.size - 1;
      option::Option::Some { val = s.node.value }
    },
    RemoveResult::Gathered g => {
      set hamt.size = hamt.size - 1;
      option::Option::Some { val = g.removed.value }
    },
    RemoveResult::NotFound n => { option::Option::None {} },
  };
}

fn find_any[a](node : Node[a]) -> option::Option[a] {
  match node {
    Node::Leaf l => { option::Option::Some { val = l.value } },
    Node::Mapped m => {
      let i = 0;
      let len = array_len#[Node[a]](m.nodes);
      while i < len {
        match find_any(m.nodes[i]) {
          option::Option::Some s => { return s },
          option::Option::None _ => { },
        };
        set i = i + 1;
      };
      option::Option::None {};
    },
  };
}

fn values[a](hamt : Hamt[a]) -> option::Option[vec::Vec[a]] {
  let zero = find_any#[a](hamt.root);
  let result = match zero {
    option::Option::Some s => { vec::new(s.val) },
    option::Option::None _ => { return option::Option::None {} },
  };
  values_node(result, hamt.root);
  option::Option::Some { val = result };
}

fn values_node[a](vec : vec::Vec[a], node : Node[a]) {
  match node {
    Node::Leaf l => { vec::push(vec, l.value) },
    Node::Mapped m => {
      let i = 0;
      let len = array_len#[Node[a]](m.nodes);
      while i < len {
        values_node(vec, m.nodes[i]);
        set i = i + 1;
      };
    },
  };
}

fn mask(hash : U32, shift : U32) -> U32 {
  u32_and(u32_shr(hash, shift), 31u)
}

fn bitpos(hash : U32, shift : U32) -> U32 {
   i32_shl(1, mask(hash, shift))
}

fn index(bitmap : U32, pos : U32) -> I32 {
  u32_to_i32(u32_popcnt(u32_and(bitmap, (pos - 1u))))
}

fn merge_leafs[a](shift : U32, left : Node::Leaf[a], hash : U32, value : a) -> Node[a] {
  let next_pos1 = bitpos(left.hash, shift);
  let next_pos2 = bitpos(hash, shift);
  if next_pos1 != next_pos2 {
    let bitmap = u32_or(next_pos1, next_pos2);
    let right = Node::Leaf { hash = hash, value = value };
    let nodes : Array[Node[a]] = if next_pos1 < next_pos2 {
      [left, right]
    } else {
      [right, left]
    };
    Node::Mapped { bitmap = bitmap, nodes = nodes };
  } else {
    let new_node = merge_leafs(shift + 5u, left, hash, value);
    Node::Mapped { bitmap = next_pos1, nodes = [new_node] };
  };
}

variant RemoveResult[a] {
  struct Success {
    node : Node::Leaf[a],
  },
  struct NotFound {},
  struct Gathered {
    new_node : Node::Leaf[a],
    removed : Node::Leaf[a],
  },
}

fn remove_rec[a](node : Node::Mapped[a], shift : U32, hash : U32) -> RemoveResult[a] {
  let pos = bitpos(hash, shift);
  if u32_and(pos, node.bitmap) == 0u {
    return RemoveResult::NotFound {};
  } else {};
  let ix = index(node.bitmap, pos);
  let next_node = node.nodes[ix];
  match next_node {
    Node::Mapped n => {
      let res = remove_rec(n, shift + 5u, hash);
      match res {
        RemoveResult::Gathered gathered => {
          if shift != 0u && u32_popcnt(n.bitmap) == 1u {
            res;
          } else {
            set n.nodes[ix] = gathered.new_node;
            RemoveResult::Success { node = gathered.removed };
          };
        },
        _ => { res },
      };
    },
    Node::Leaf l => {
      if hash != l.hash {
        RemoveResult::NotFound {};
      } else {
        let rows = u32_popcnt(node.bitmap);
        // We never gather the root node
        if rows == 1u && shift == 0u {
          set node.bitmap = 0u;
          set node.nodes = [];
          return RemoveResult::Success { node = l };
        } else {};
        if rows == 2u {
          let other = if ix == 0 { node.nodes[1] } else { node.nodes[0] };
          match other {
            Node::Leaf other_l => {
              if shift != 0u {
                return RemoveResult::Gathered { new_node = other_l, removed = l };
              } else {};
            },
            _ => {},
          };
          set node.bitmap = u32_and(node.bitmap, u32_xor(pos, 0u - 1u));
          set node.nodes = [other];
          RemoveResult::Success { node = l };
        } else {
          let new_nodes = remove_node(node.nodes, ix);
          set node.bitmap = u32_and(node.bitmap, u32_xor(pos, 0u - 1u));
          set node.nodes = new_nodes;
          RemoveResult::Success { node = l };
        };
      };
    },
  };
}

fn remove_node[a](as : Array[a], ix : I32) -> Array[a] {
  let old_len = array_len#[a](as);
  if old_len == 1 {
    [];
  } else {
    let res = array_new#[a](as[0], old_len - 1);
    array_copy#[a](res, 0, as, 0, ix);
    array_copy#[a](res, ix, as, ix + 1, old_len - ix - 1);
    res;
  };
}

fn insert_node[a](as : Array[a], ix : I32, elem : a) -> Array[a] {
  let old_len = array_len#[a](as);
  if old_len == 0 {
    [elem];
  } else {
    let res = array_new#[a](elem, old_len + 1);
    array_copy#[a](res, 0, as, 0, ix);
    array_copy#[a](res, ix + 1, as, ix, old_len - ix);
    res;
  };
}

struct GetResult[a] {
  shift : U32,
  anchor : Node::Mapped[a],
  payload : GetResultPayload[a],
}

variant GetResultPayload[a] {
  struct Success { node : Node::Leaf[a] },
  struct Conflict { node : Node::Leaf[a] },
  struct Missing {},
}

fn get_with_anchor[a](
  anchor : Node::Mapped[a],
  shift : U32,
  hash : U32,
) -> GetResult[a] {
  let pos = bitpos(hash, shift);
  if u32_and(anchor.bitmap, pos) == 0u {
    GetResult {
      shift = shift,
      anchor = anchor,
      payload = GetResultPayload::Missing {},
    };
  } else {
    let ix = index(anchor.bitmap, pos);
    let n = anchor.nodes[ix];
    match n {
      Node::Mapped anchor => {
        get_with_anchor(anchor, shift + 5u, hash);
      },
      Node::Leaf leaf => {
        if leaf.hash == hash {
          GetResult {
            shift = shift,
            anchor = anchor,
            payload = GetResultPayload::Success { node = leaf },
          };
        } else {
          GetResult {
            shift = shift,
            anchor = anchor,
            payload = GetResultPayload::Conflict { node = leaf },
          };
        };
      },
    };
  };
}
