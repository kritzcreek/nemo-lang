module option
exports (Option, some, none, map, flat_map, is_none, is_some)

variant Option[t] {
  struct Some { val: t },
  struct None {}
}

fn some[t](value: t) -> Option[t] {
  Option::Some { val = value }
}

fn none[t]() -> Option[t] {
  Option::None {}
}

fn map[t, u](option: Option[t], f: fn(t) -> u) -> Option[u] {
  match option {
    Option::Some s => { Option::Some { val = f(s.val) } },
    Option::None _ => { none() },
  }
}

fn flat_map[t, u](option: Option[t], f: fn(t) -> Option[u]) -> Option[u] {
  match option {
    Option::Some s => { f(s.val) },
    Option::None _ => { Option::None#[u] {} },
  }
}

fn is_some[a](opt : Option[a]) -> Bool {
  match opt {
    Option::Some _ => { true },
    Option::None _ => { false },
  }
}

fn is_none[a](opt : Option[a]) -> Bool {
  match opt {
    Option::None _ => { true },
    Option::Some _ => { false },
  }
}
