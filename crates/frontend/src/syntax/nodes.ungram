Root = Module

Module = ModHeader? ModUse* TopLevel*

ModHeader = 'ident' ModExport*

ModExport = ModExportVal | ModExportTy | ModExportAll
ModExportVal = 'ident'
ModExportTy = 'upper_ident'
ModExportAll = 'dotdotdot'

ModUse = 'ident'

// TopLevel
TopLevel
  = TopImport
  | TopGlobal
  | TopStruct
  | TopVariant
  | TopFn

TopImport = 'import' ImpInternal ':' Type 'from' ImpExternal
ImpInternal = 'ident'
ImpExternal = 'ident'

TopGlobal = 'global' 'ident' ':' Type '=' Expr

TopStruct = 'struct' 'upper_ident' type_params:ParamTy* '{' StructField* '}'
StructField = 'ident' ':' Type

TopVariant = 'variant' 'upper_ident' type_params:ParamTy* '{' TopStruct* '}'

TopFn = 'fn' 'ident' ParamTy* '(' Param* ')' ('->' Type)? body:EBlock
Param = 'ident' ':' Type
ParamTy = 'ident'

// Types
Type
  = TyInt
  | TyFloat
  | TyBool
  | TyBytes
  | TyUnit
  | TyArray
  | TyVar
  | TyCons
  | TyFn

TyInt = 'i32'
TyFloat = 'f32'
TyBool = 'bool'
TyBytes = 'bytes'
TyUnit = 'unit'
TyArray = '[' elem:Type ']'
TyCons = ModQualifier? 'upper_ident' type_args:Type*
TyVar = 'ident'

ModQualifier = 'ident' '::'
Qualifier = 'upper_ident' '::'

TyFn = 'fn' TyArgList '->' result:Type
TyArgList = '(' Type* ')'

// Literals
Literal = LitBool | LitFloat | LitInt | LitBytes

LitInt = 'int_lit' | 'binary_lit' | 'hex_lit'
LitBool = 'true' | 'false'
LitFloat = 'float_lit'
LitBytes = 'bytes_lit'

// Expressions
Expr
  = ELit
  | EVar
  | EArray
  | EStruct
  | ECall
  | EParen
  | EBinary
  | EArrayIdx
  | EStructIdx
  | EIf
  | EMatch
  | ELambda
  | EBlock
  | EReturn

ELit = Literal
EVar = ModQualifier? 'ident'
EArray = '[' Expr* ']'
EParen = '(' Expr ')'
EArrayIdx = Expr '[' index:Expr ']'

ECall = Expr ETyArgList? EArgList
EArgList = '(' Expr* ')'
ETyArgList = Type*

EBinary = lhs:Expr op:('+' | '-') rhs:Expr

EStruct = ModQualifier? Qualifier? 'upper_ident' ETyArgList? '{' EStructField* '}'
EStructField = 'ident' '=' Expr

EStructIdx = Expr '.' 'ident'
EIf = 'if' condition:Expr then_branch:EBlock 'else' else_branch:EBlock

EMatch = 'match' scrutinee:Expr '{' EMatchBranch* '}'
EMatchBranch = Pattern '=>' body:EBlock

ELambda = 'fn' '(' Param* ')' return_ty:Type body:Expr

EBlock = '{' Declaration* '}'
EReturn = 'return' Expr

// Declarations
Declaration
  = DLet
  | DSet
  | DWhile
  | DExpr

DLet = 'let' 'ident' (':' Type)? '=' Expr
DSet = 'set' SetTarget '=' Expr
DWhile = 'while' Expr EBlock
DExpr = Expr

SetTarget = SetTargetExpr
SetTargetExpr = EVar | EArrayIdx | EStructIdx

Pattern
  = PatVariant
  | PatVar

PatVariant = ModQualifier? Qualifier 'upper_ident' 'ident'
PatVar = 'ident'
