---
source: crates/frontend/tests/lib.rs
assertion_line: 129
expression: output
input_file: crates/frontend/tests/parsing/variants.nemo
---
Root@0..406
  Module@0..406
    TopVariant@0..104
      VARIANT_KW@0..7 "variant"
      SPACE@7..8 " "
      UPPER_IDENT@8..12 "Rope"
      SPACE@12..13 " "
      L_BRACE@13..14 "{"
      TopStruct@14..43
        LINEFEED@14..15 "\n"
        SPACE@15..17 "  "
        STRUCT_KW@17..23 "struct"
        SPACE@23..24 " "
        UPPER_IDENT@24..28 "Leaf"
        SPACE@28..29 " "
        L_BRACE@29..30 "{"
        SPACE@30..31 " "
        StructField@31..42
          IDENT@31..35 "char"
          SPACE@35..36 " "
          COLON@36..37 ":"
          SPACE@37..38 " "
          TyInt@38..42
            I32_BUILTIN@38..41 "i32"
            SPACE@41..42 " "
        R_BRACE@42..43 "}"
      COMMA@43..44 ","
      TopStruct@44..101
        LINEFEED@44..45 "\n"
        SPACE@45..47 "  "
        STRUCT_KW@47..53 "struct"
        SPACE@53..54 " "
        UPPER_IDENT@54..58 "Node"
        SPACE@58..59 " "
        L_BRACE@59..60 "{"
        StructField@60..82
          LINEFEED@60..61 "\n"
          SPACE@61..65 "    "
          IDENT@65..73 "children"
          SPACE@73..74 " "
          COLON@74..75 ":"
          SPACE@75..76 " "
          TyArray@76..82
            L_BRACKET@76..77 "["
            TyCons@77..81
              UPPER_IDENT@77..81 "Rope"
            R_BRACKET@81..82 "]"
        COMMA@82..83 ","
        StructField@83..97
          LINEFEED@83..84 "\n"
          SPACE@84..88 "    "
          IDENT@88..91 "len"
          SPACE@91..92 " "
          COLON@92..93 ":"
          SPACE@93..94 " "
          TyInt@94..97
            I32_BUILTIN@94..97 "i32"
        LINEFEED@97..98 "\n"
        SPACE@98..100 "  "
        R_BRACE@100..101 "}"
      COMMA@101..102 ","
      LINEFEED@102..103 "\n"
      R_BRACE@103..104 "}"
    TopGlobal@104..140
      LINEFEED@104..105 "\n"
      LINEFEED@105..106 "\n"
      GLOBAL_KW@106..112 "global"
      SPACE@112..113 " "
      IDENT@113..114 "_"
      SPACE@114..115 " "
      EQUALS@115..116 "="
      SPACE@116..117 " "
      EStruct@117..140
        Qualifier@117..123
          UPPER_IDENT@117..121 "Rope"
          DOUBLE_COLON@121..123 "::"
        UPPER_IDENT@123..127 "Leaf"
        SPACE@127..128 " "
        L_BRACE@128..129 "{"
        SPACE@129..130 " "
        EStructField@130..139
          IDENT@130..134 "char"
          SPACE@134..135 " "
          EQUALS@135..136 "="
          SPACE@136..137 " "
          ELit@137..139
            LitInt@137..139
              INT_LIT@137..138 "2"
              SPACE@138..139 " "
        R_BRACE@139..140 "}"
    TopGlobal@140..193
      LINEFEED@140..141 "\n"
      GLOBAL_KW@141..147 "global"
      SPACE@147..148 " "
      IDENT@148..152 "rope"
      SPACE@152..153 " "
      EQUALS@153..154 "="
      SPACE@154..155 " "
      EStruct@155..193
        Qualifier@155..161
          UPPER_IDENT@155..159 "Rope"
          DOUBLE_COLON@159..161 "::"
        UPPER_IDENT@161..165 "Node"
        SPACE@165..166 " "
        L_BRACE@166..167 "{"
        SPACE@167..168 " "
        EStructField@168..181
          IDENT@168..176 "children"
          SPACE@176..177 " "
          EQUALS@177..178 "="
          SPACE@178..179 " "
          EArray@179..181
            L_BRACKET@179..180 "["
            R_BRACKET@180..181 "]"
        COMMA@181..182 ","
        SPACE@182..183 " "
        EStructField@183..192
          IDENT@183..186 "len"
          SPACE@186..187 " "
          EQUALS@187..188 "="
          SPACE@188..189 " "
          ELit@189..192
            LitInt@189..192
              INT_LIT@189..191 "10"
              SPACE@191..192 " "
        R_BRACE@192..193 "}"
    TopGlobal@193..243
      LINEFEED@193..194 "\n"
      GLOBAL_KW@194..200 "global"
      SPACE@200..201 " "
      IDENT@201..202 "_"
      SPACE@202..203 " "
      EQUALS@203..204 "="
      SPACE@204..205 " "
      EStruct@205..243
        Qualifier@205..211
          UPPER_IDENT@205..209 "Rope"
          DOUBLE_COLON@209..211 "::"
        UPPER_IDENT@211..215 "Node"
        SPACE@215..216 " "
        L_BRACE@216..217 "{"
        SPACE@217..218 " "
        EStructField@218..231
          IDENT@218..226 "children"
          SPACE@226..227 " "
          EQUALS@227..228 "="
          SPACE@228..229 " "
          EArray@229..231
            L_BRACKET@229..230 "["
            R_BRACKET@230..231 "]"
        COMMA@231..232 ","
        SPACE@232..233 " "
        EStructField@233..242
          IDENT@233..236 "len"
          SPACE@236..237 " "
          EQUALS@237..238 "="
          SPACE@238..239 " "
          ELit@239..242
            LitInt@239..242
              INT_LIT@239..241 "10"
              SPACE@241..242 " "
        R_BRACE@242..243 "}"
    TopGlobal@243..368
      LINEFEED@243..244 "\n"
      LINEFEED@244..245 "\n"
      GLOBAL_KW@245..251 "global"
      SPACE@251..252 " "
      IDENT@252..253 "_"
      SPACE@253..254 " "
      EQUALS@254..255 "="
      SPACE@255..256 " "
      EMatch@256..368
        MATCH_KW@256..261 "match"
        SPACE@261..262 " "
        EVar@262..267
          IDENT@262..266 "rope"
          SPACE@266..267 " "
        L_BRACE@267..268 "{"
        EMatchBranch@268..303
          PatVariant@268..287
            Qualifier@268..277
              LINEFEED@268..269 "\n"
              SPACE@269..271 "  "
              UPPER_IDENT@271..275 "Rope"
              DOUBLE_COLON@275..277 "::"
            UPPER_IDENT@277..281 "Leaf"
            SPACE@281..282 " "
            IDENT@282..286 "leaf"
            SPACE@286..287 " "
          FAT_ARROW@287..289 "=>"
          SPACE@289..290 " "
          EBlock@290..303
            L_BRACE@290..291 "{"
            SPACE@291..292 " "
            DExpr@292..302
              EStructIdx@292..302
                EVar@292..296
                  IDENT@292..296 "leaf"
                DOT@296..297 "."
                IDENT@297..301 "char"
                SPACE@301..302 " "
            R_BRACE@302..303 "}"
        COMMA@303..304 ","
        EMatchBranch@304..365
          PatVariant@304..323
            Qualifier@304..313
              LINEFEED@304..305 "\n"
              SPACE@305..307 "  "
              UPPER_IDENT@307..311 "Rope"
              DOUBLE_COLON@311..313 "::"
            UPPER_IDENT@313..317 "Node"
            SPACE@317..318 " "
            IDENT@318..322 "node"
            SPACE@322..323 " "
          FAT_ARROW@323..325 "=>"
          SPACE@325..326 " "
          EBlock@326..365
            L_BRACE@326..327 "{"
            SPACE@327..328 " "
            DExpr@328..364
              EBinary@328..364
                ECall@328..353
                  EVar@328..337
                    IDENT@328..337 "array_len"
                  EArgList@337..353
                    L_PAREN@337..338 "("
                    EStructIdx@338..351
                      EVar@338..342
                        IDENT@338..342 "node"
                      DOT@342..343 "."
                      IDENT@343..351 "children"
                    R_PAREN@351..352 ")"
                    SPACE@352..353 " "
                BinOp@353..355
                  PLUS@353..354 "+"
                  SPACE@354..355 " "
                EStructIdx@355..364
                  EVar@355..359
                    IDENT@355..359 "node"
                  DOT@359..360 "."
                  IDENT@360..363 "len"
                  SPACE@363..364 " "
            R_BRACE@364..365 "}"
        COMMA@365..366 ","
        LINEFEED@366..367 "\n"
        R_BRACE@367..368 "}"
    TopGlobal@368..406
      LINEFEED@368..369 "\n"
      LINEFEED@369..370 "\n"
      GLOBAL_KW@370..376 "global"
      SPACE@376..377 " "
      IDENT@377..378 "_"
      SPACE@378..379 " "
      EQUALS@379..380 "="
      SPACE@380..381 " "
      EMatch@381..406
        MATCH_KW@381..386 "match"
        SPACE@386..387 " "
        ELit@387..390
          LitInt@387..390
            INT_LIT@387..389 "10"
            SPACE@389..390 " "
        L_BRACE@390..391 "{"
        EMatchBranch@391..404
          PatVar@391..396
            LINEFEED@391..392 "\n"
            SPACE@392..394 "  "
            IDENT@394..395 "x"
            SPACE@395..396 " "
          FAT_ARROW@396..398 "=>"
          SPACE@398..399 " "
          EBlock@399..404
            L_BRACE@399..400 "{"
            SPACE@400..401 " "
            DExpr@401..403
              EVar@401..403
                IDENT@401..402 "x"
                SPACE@402..403 " "
            R_BRACE@403..404 "}"
        LINEFEED@404..405 "\n"
        R_BRACE@405..406 "}"
