---
source: crates/frontend/tests/parser.rs
expression: output
input_file: crates/frontend/tests/passing/toplevel.nemo
---
import internal : fn (i32, f32) -> i32 from external

struct Vec {
  x : f32,
  y : f32,
}

global x = 10
global y : f32 = 10.0

fn main() {

}

fn add(x : i32, y : i32) -> i32 {
    x + y
}


// ---
Root@0..191
  TopImport@0..53
    LINEFEED@0..1 "\n"
    IMPORT_KW@1..7 "import"
    SPACE@7..8 " "
    ImpInternal@8..17
      IDENT@8..16 "internal"
      SPACE@16..17 " "
    COLON@17..18 ":"
    SPACE@18..19 " "
    TyFn@19..40
      FN_KW@19..21 "fn"
      SPACE@21..22 " "
      TyArgList@22..33
        L_PAREN@22..23 "("
        TyInt@23..26
          I32_BUILTIN@23..26 "i32"
        COMMA@26..27 ","
        SPACE@27..28 " "
        TyFloat@28..31
          F32_BUILTIN@28..31 "f32"
        R_PAREN@31..32 ")"
        SPACE@32..33 " "
      ARROW@33..35 "->"
      SPACE@35..36 " "
      TyInt@36..40
        I32_BUILTIN@36..39 "i32"
        SPACE@39..40 " "
    FROM_KW@40..44 "from"
    SPACE@44..45 " "
    ImpExternal@45..53
      IDENT@45..53 "external"
  TopStruct@53..91
    LINEFEED@53..54 "\n"
    LINEFEED@54..55 "\n"
    STRUCT_KW@55..61 "struct"
    SPACE@61..62 " "
    UPPER_IDENT@62..65 "Vec"
    SPACE@65..66 " "
    L_BRACE@66..67 "{"
    StructField@67..77
      LINEFEED@67..68 "\n"
      SPACE@68..70 "  "
      IDENT@70..71 "x"
      SPACE@71..72 " "
      COLON@72..73 ":"
      SPACE@73..74 " "
      TyFloat@74..77
        F32_BUILTIN@74..77 "f32"
    COMMA@77..78 ","
    StructField@78..88
      LINEFEED@78..79 "\n"
      SPACE@79..81 "  "
      IDENT@81..82 "y"
      SPACE@82..83 " "
      COLON@83..84 ":"
      SPACE@84..85 " "
      TyFloat@85..88
        F32_BUILTIN@85..88 "f32"
    COMMA@88..89 ","
    LINEFEED@89..90 "\n"
    R_BRACE@90..91 "}"
  TopGlobal@91..106
    LINEFEED@91..92 "\n"
    LINEFEED@92..93 "\n"
    GLOBAL_KW@93..99 "global"
    SPACE@99..100 " "
    IDENT@100..101 "x"
    SPACE@101..102 " "
    EQUALS@102..103 "="
    SPACE@103..104 " "
    ELit@104..106
      LitInt@104..106
        INT_LIT@104..106 "10"
  TopGlobal@106..128
    LINEFEED@106..107 "\n"
    GLOBAL_KW@107..113 "global"
    SPACE@113..114 " "
    IDENT@114..115 "y"
    SPACE@115..116 " "
    COLON@116..117 ":"
    SPACE@117..118 " "
    TyFloat@118..122
      F32_BUILTIN@118..121 "f32"
      SPACE@121..122 " "
    EQUALS@122..123 "="
    SPACE@123..124 " "
    ELit@124..128
      LitFloat@124..128
        FLOAT_LIT@124..128 "10.0"
  TopFn@128..144
    LINEFEED@128..129 "\n"
    LINEFEED@129..130 "\n"
    FN_KW@130..132 "fn"
    SPACE@132..133 " "
    IDENT@133..137 "main"
    L_PAREN@137..138 "("
    R_PAREN@138..139 ")"
    SPACE@139..140 " "
    EBlock@140..144
      L_BRACE@140..141 "{"
      LINEFEED@141..142 "\n"
      LINEFEED@142..143 "\n"
      R_BRACE@143..144 "}"
  TopFn@144..191
    LINEFEED@144..145 "\n"
    LINEFEED@145..146 "\n"
    FN_KW@146..148 "fn"
    SPACE@148..149 " "
    IDENT@149..152 "add"
    L_PAREN@152..153 "("
    Param@153..162
      IDENT@153..154 "x"
      SPACE@154..155 " "
      COLON@155..156 ":"
      SPACE@156..157 " "
      TyInt@157..160
        I32_BUILTIN@157..160 "i32"
      COMMA@160..161 ","
      SPACE@161..162 " "
    Param@162..169
      IDENT@162..163 "y"
      SPACE@163..164 " "
      COLON@164..165 ":"
      SPACE@165..166 " "
      TyInt@166..169
        I32_BUILTIN@166..169 "i32"
    R_PAREN@169..170 ")"
    SPACE@170..171 " "
    ARROW@171..173 "->"
    SPACE@173..174 " "
    TyInt@174..178
      I32_BUILTIN@174..177 "i32"
      SPACE@177..178 " "
    EBlock@178..191
      L_BRACE@178..179 "{"
      DExpr@179..189
        EBinary@179..189
          EVar@179..186
            LINEFEED@179..180 "\n"
            SPACE@180..184 "    "
            IDENT@184..185 "x"
            SPACE@185..186 " "
          BinOp@186..188
            PLUS@186..187 "+"
            SPACE@187..188 " "
          EVar@188..189
            IDENT@188..189 "y"
      LINEFEED@189..190 "\n"
      R_BRACE@190..191 "}"
