variant Enum {
  struct A {},
  struct B {},
  struct C {},
}

variant Shape {
  struct Circle { radius : F32 },
  struct Rectangle { len : F32, width : F32 },
}

import print_char : fn (I32) -> Unit from print_char
import log_f32 : fn (F32) -> Unit from log_f32

fn print_enum(e : Enum) {
  let c = match e {
    Enum::A _ => { bytes_get("a", 0) },
    Enum::B _ => { bytes_get("b", 0) },
    Enum::C _ => { bytes_get("c", 0) },
  };
  print_char(c);
  print_char(10);
  {};
}

fn print_circle(c : Shape::Circle) {
  log_f32(c.radius);
}

fn circle(radius : F32) -> Shape::Circle {
  Shape::Circle { radius = radius }
}

fn print_shape(s : Shape) {
  match s {
    Shape::Circle c => {
      print_circle(c);
    },
    Shape::Rectangle r => {
      log_f32(r.len);
      log_f32(r.width);
    },
  };
}

fn main() {
  print_enum(Enum::A {});
  print_enum(Enum::B {});
  print_enum(Enum::C {});

  print_shape(Shape::Circle { radius = 2.0 });
  print_shape(Shape::Rectangle { len = 3.1, width = 4.0 });
}
