global frame_timer = 0.0

fn tick(time_elapsed_ms: F32) -> Unit {
  set frame_timer = frame_timer + time_elapsed_ms;
  if frame_timer > 100.0 {
    set frame_timer = 0.0;
    clear();
    let generator = \() -> I32 { random_int(0, 99) };
    let buckets = histogram(10, generator);
    render_canvas(buckets)
  } else {}
}

fn main() {
  let generator = \() -> I32 { random_int(0, 99) };
  let buckets = histogram(10, generator);
  render(buckets)
}

fn histogram(count : I32, generator : fn () -> I32) -> Array[I32] {
  let buckets = [0, 0, 0, 0, 0];
  while count > 0 {
    let bucket = generator() / 20;
    set buckets[bucket] = buckets[bucket] + 1;
    set count = count - 1
  };
  buckets
}

import print_char : fn (I32) -> Unit from print_char

global star = bytes_get("*", 0)
global line_feed = 10

fn render(buckets : Array[I32]) -> Unit {
  let i = 0 ;
  while i < array_len#[I32](buckets) {
    print_stars(buckets[i]);
    print_char(line_feed);
    set i = i + 1
  }
}

fn print_stars(n : I32) {
  let i = 0 ;
  while i < n {
    print_char(star);
    set i = i + 1
  }
}

import random : fn () -> F32 from random

fn round(x : F32) -> I32 {
  let y = x + 0.5;
  i32_trunc_f32_s(y)
}

fn random_int(low : I32, high : I32) -> I32 {
  let scaled = random() * f32_convert_i32(high - low);
  low + round(scaled)
}
import move_to : fn (F32, F32) -> Unit from move_to
import line_to : fn (F32, F32) -> Unit from line_to
import arc : fn (F32, F32, F32, F32, F32) -> Unit from arc
import set_stroke_color : fn (F32, F32, F32) -> Unit from set_stroke_color
import begin_path : fn () -> Unit from begin_path
import close_path : fn () -> Unit from close_path
import stroke : fn () -> Unit from stroke
import clear : fn () -> Unit from clear_canvas

fn render_canvas(buckets: Array[I32]) {
  let i = 0;
  while i < array_len#[I32](buckets) {
    let x = f32_convert_i32(i * 100);
    let y = f32_convert_i32(buckets[i] * 50);
    draw_rect(x, 500.0 - y, 100.0, y);
    set i = i + 1
  }
}

struct Color {
  r : F32,
  g : F32,
  b : F32
}

fn random_color() -> Color {
  Color { r = random() * 255.0, g = random() * 255.0, b = random() * 255.0 }
}

fn draw_rect(x: F32, y: F32, width: F32, height: F32) {
  let color = random_color();
  begin_path();
  move_to(x, y);
  line_to(x + width, y);
  line_to(x + width, y + height);
  line_to(x, y + height);
  close_path();
  set_stroke_color(color.r, color.g, color.b);
  stroke();
}
