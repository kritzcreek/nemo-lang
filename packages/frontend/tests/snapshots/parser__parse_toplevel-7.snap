---
source: packages/frontend/tests/parser.rs
expression: output
input_file: packages/frontend/tests/passing/toplevel.nemo
---
global _ = f();
global _ = f(1);
global _ = f(1, 2,);
global _ = f(1, f(2));
global _ = x.f();
global _ = x[1].f();
global _ = f(1)(x);


---
Root@0..136
  TopGlobal@0..16
    LINEFEED@0..1 "\n"
    GLOBAL_KW@1..7 "global"
    SPACE@7..8 " "
    IDENT@8..9 "_"
    SPACE@9..10 " "
    EQUALS@10..11 "="
    SPACE@11..12 " "
    ECall@12..15
      EVar@12..13
        IDENT@12..13 "f"
      EArgList@13..15
        L_PAREN@13..14 "("
        R_PAREN@14..15 ")"
    SEMICOLON@15..16 ";"
  TopGlobal@16..33
    LINEFEED@16..17 "\n"
    GLOBAL_KW@17..23 "global"
    SPACE@23..24 " "
    IDENT@24..25 "_"
    SPACE@25..26 " "
    EQUALS@26..27 "="
    SPACE@27..28 " "
    ECall@28..32
      EVar@28..29
        IDENT@28..29 "f"
      EArgList@29..32
        L_PAREN@29..30 "("
        ELit@30..31
          LitInt@30..31
            INT_LIT@30..31 "1"
        R_PAREN@31..32 ")"
    SEMICOLON@32..33 ";"
  TopGlobal@33..54
    LINEFEED@33..34 "\n"
    GLOBAL_KW@34..40 "global"
    SPACE@40..41 " "
    IDENT@41..42 "_"
    SPACE@42..43 " "
    EQUALS@43..44 "="
    SPACE@44..45 " "
    ECall@45..53
      EVar@45..46
        IDENT@45..46 "f"
      EArgList@46..53
        L_PAREN@46..47 "("
        ELit@47..48
          LitInt@47..48
            INT_LIT@47..48 "1"
        COMMA@48..49 ","
        SPACE@49..50 " "
        ELit@50..51
          LitInt@50..51
            INT_LIT@50..51 "2"
        COMMA@51..52 ","
        R_PAREN@52..53 ")"
    SEMICOLON@53..54 ";"
  TopGlobal@54..77
    LINEFEED@54..55 "\n"
    GLOBAL_KW@55..61 "global"
    SPACE@61..62 " "
    IDENT@62..63 "_"
    SPACE@63..64 " "
    EQUALS@64..65 "="
    SPACE@65..66 " "
    ECall@66..76
      EVar@66..67
        IDENT@66..67 "f"
      EArgList@67..76
        L_PAREN@67..68 "("
        ELit@68..69
          LitInt@68..69
            INT_LIT@68..69 "1"
        COMMA@69..70 ","
        SPACE@70..71 " "
        ECall@71..75
          EVar@71..72
            IDENT@71..72 "f"
          EArgList@72..75
            L_PAREN@72..73 "("
            ELit@73..74
              LitInt@73..74
                INT_LIT@73..74 "2"
            R_PAREN@74..75 ")"
        R_PAREN@75..76 ")"
    SEMICOLON@76..77 ";"
  TopGlobal@77..95
    LINEFEED@77..78 "\n"
    GLOBAL_KW@78..84 "global"
    SPACE@84..85 " "
    IDENT@85..86 "_"
    SPACE@86..87 " "
    EQUALS@87..88 "="
    SPACE@88..89 " "
    ECall@89..94
      EStructIdx@89..92
        EVar@89..90
          IDENT@89..90 "x"
        DOT@90..91 "."
        IDENT@91..92 "f"
      EArgList@92..94
        L_PAREN@92..93 "("
        R_PAREN@93..94 ")"
    SEMICOLON@94..95 ";"
  TopGlobal@95..116
    LINEFEED@95..96 "\n"
    GLOBAL_KW@96..102 "global"
    SPACE@102..103 " "
    IDENT@103..104 "_"
    SPACE@104..105 " "
    EQUALS@105..106 "="
    SPACE@106..107 " "
    ECall@107..115
      EStructIdx@107..113
        EArrayIdx@107..111
          EVar@107..108
            IDENT@107..108 "x"
          L_BRACKET@108..109 "["
          ELit@109..110
            LitInt@109..110
              INT_LIT@109..110 "1"
          R_BRACKET@110..111 "]"
        DOT@111..112 "."
        IDENT@112..113 "f"
      EArgList@113..115
        L_PAREN@113..114 "("
        R_PAREN@114..115 ")"
    SEMICOLON@115..116 ";"
  TopGlobal@116..136
    LINEFEED@116..117 "\n"
    GLOBAL_KW@117..123 "global"
    SPACE@123..124 " "
    IDENT@124..125 "_"
    SPACE@125..126 " "
    EQUALS@126..127 "="
    SPACE@127..128 " "
    ECall@128..135
      ECall@128..132
        EVar@128..129
          IDENT@128..129 "f"
        EArgList@129..132
          L_PAREN@129..130 "("
          ELit@130..131
            LitInt@130..131
              INT_LIT@130..131 "1"
          R_PAREN@131..132 ")"
      EArgList@132..135
        L_PAREN@132..133 "("
        EVar@133..134
          IDENT@133..134 "x"
        R_PAREN@134..135 ")"
    SEMICOLON@135..136 ";"
