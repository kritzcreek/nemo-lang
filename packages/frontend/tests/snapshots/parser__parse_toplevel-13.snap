---
source: packages/frontend/tests/parser.rs
expression: output
input_file: packages/frontend/tests/passing/toplevel.nemo
---
variant Rope {
  struct Leaf { char : i32 },
  struct Node {
    children : [Rope],
    len : i32
  },
}

global _ = Rope::Leaf { char = 2 }
global _ = Rope::Node { children = [], len = 10 }
global _ = Rope::Node { children = [], len = 10 }

global _ = match rope {
  Rope::Leaf leaf => { leaf.char },
  Rope::Node node => { node.children + node.len },
}



// ---
Root@0..355
  TopVariant@0..105
    LINEFEED@0..1 "\n"
    VARIANT_KW@1..8 "variant"
    SPACE@8..9 " "
    UPPER_IDENT@9..13 "Rope"
    SPACE@13..14 " "
    L_BRACE@14..15 "{"
    TopStruct@15..44
      LINEFEED@15..16 "\n"
      SPACE@16..18 "  "
      STRUCT_KW@18..24 "struct"
      SPACE@24..25 " "
      UPPER_IDENT@25..29 "Leaf"
      SPACE@29..30 " "
      L_BRACE@30..31 "{"
      SPACE@31..32 " "
      StructField@32..43
        IDENT@32..36 "char"
        SPACE@36..37 " "
        COLON@37..38 ":"
        SPACE@38..39 " "
        TyInt@39..43
          I32_BUILTIN@39..42 "i32"
          SPACE@42..43 " "
      R_BRACE@43..44 "}"
    COMMA@44..45 ","
    TopStruct@45..102
      LINEFEED@45..46 "\n"
      SPACE@46..48 "  "
      STRUCT_KW@48..54 "struct"
      SPACE@54..55 " "
      UPPER_IDENT@55..59 "Node"
      SPACE@59..60 " "
      L_BRACE@60..61 "{"
      StructField@61..83
        LINEFEED@61..62 "\n"
        SPACE@62..66 "    "
        IDENT@66..74 "children"
        SPACE@74..75 " "
        COLON@75..76 ":"
        SPACE@76..77 " "
        TyArray@77..83
          L_BRACKET@77..78 "["
          TyCons@78..82
            UPPER_IDENT@78..82 "Rope"
          R_BRACKET@82..83 "]"
      COMMA@83..84 ","
      StructField@84..98
        LINEFEED@84..85 "\n"
        SPACE@85..89 "    "
        IDENT@89..92 "len"
        SPACE@92..93 " "
        COLON@93..94 ":"
        SPACE@94..95 " "
        TyInt@95..98
          I32_BUILTIN@95..98 "i32"
      LINEFEED@98..99 "\n"
      SPACE@99..101 "  "
      R_BRACE@101..102 "}"
    COMMA@102..103 ","
    LINEFEED@103..104 "\n"
    R_BRACE@104..105 "}"
  TopGlobal@105..141
    LINEFEED@105..106 "\n"
    LINEFEED@106..107 "\n"
    GLOBAL_KW@107..113 "global"
    SPACE@113..114 " "
    IDENT@114..115 "_"
    SPACE@115..116 " "
    EQUALS@116..117 "="
    SPACE@117..118 " "
    EStruct@118..141
      Qualifier@118..124
        UPPER_IDENT@118..122 "Rope"
        DOUBLE_COLON@122..124 "::"
      UPPER_IDENT@124..128 "Leaf"
      SPACE@128..129 " "
      L_BRACE@129..130 "{"
      SPACE@130..131 " "
      EStructField@131..140
        IDENT@131..135 "char"
        SPACE@135..136 " "
        EQUALS@136..137 "="
        SPACE@137..138 " "
        ELit@138..140
          LitInt@138..140
            INT_LIT@138..139 "2"
            SPACE@139..140 " "
      R_BRACE@140..141 "}"
  TopGlobal@141..191
    LINEFEED@141..142 "\n"
    GLOBAL_KW@142..148 "global"
    SPACE@148..149 " "
    IDENT@149..150 "_"
    SPACE@150..151 " "
    EQUALS@151..152 "="
    SPACE@152..153 " "
    EStruct@153..191
      Qualifier@153..159
        UPPER_IDENT@153..157 "Rope"
        DOUBLE_COLON@157..159 "::"
      UPPER_IDENT@159..163 "Node"
      SPACE@163..164 " "
      L_BRACE@164..165 "{"
      SPACE@165..166 " "
      EStructField@166..179
        IDENT@166..174 "children"
        SPACE@174..175 " "
        EQUALS@175..176 "="
        SPACE@176..177 " "
        EArray@177..179
          L_BRACKET@177..178 "["
          R_BRACKET@178..179 "]"
      COMMA@179..180 ","
      SPACE@180..181 " "
      EStructField@181..190
        IDENT@181..184 "len"
        SPACE@184..185 " "
        EQUALS@185..186 "="
        SPACE@186..187 " "
        ELit@187..190
          LitInt@187..190
            INT_LIT@187..189 "10"
            SPACE@189..190 " "
      R_BRACE@190..191 "}"
  TopGlobal@191..241
    LINEFEED@191..192 "\n"
    GLOBAL_KW@192..198 "global"
    SPACE@198..199 " "
    IDENT@199..200 "_"
    SPACE@200..201 " "
    EQUALS@201..202 "="
    SPACE@202..203 " "
    EStruct@203..241
      Qualifier@203..209
        UPPER_IDENT@203..207 "Rope"
        DOUBLE_COLON@207..209 "::"
      UPPER_IDENT@209..213 "Node"
      SPACE@213..214 " "
      L_BRACE@214..215 "{"
      SPACE@215..216 " "
      EStructField@216..229
        IDENT@216..224 "children"
        SPACE@224..225 " "
        EQUALS@225..226 "="
        SPACE@226..227 " "
        EArray@227..229
          L_BRACKET@227..228 "["
          R_BRACKET@228..229 "]"
      COMMA@229..230 ","
      SPACE@230..231 " "
      EStructField@231..240
        IDENT@231..234 "len"
        SPACE@234..235 " "
        EQUALS@235..236 "="
        SPACE@236..237 " "
        ELit@237..240
          LitInt@237..240
            INT_LIT@237..239 "10"
            SPACE@239..240 " "
      R_BRACE@240..241 "}"
  TopGlobal@241..355
    LINEFEED@241..242 "\n"
    LINEFEED@242..243 "\n"
    GLOBAL_KW@243..249 "global"
    SPACE@249..250 " "
    IDENT@250..251 "_"
    SPACE@251..252 " "
    EQUALS@252..253 "="
    SPACE@253..254 " "
    EMatch@254..355
      MATCH_KW@254..259 "match"
      SPACE@259..260 " "
      EVar@260..265
        IDENT@260..264 "rope"
        SPACE@264..265 " "
      L_BRACE@265..266 "{"
      EMatchBranch@266..301
        PatVariant@266..285
          Qualifier@266..275
            LINEFEED@266..267 "\n"
            SPACE@267..269 "  "
            UPPER_IDENT@269..273 "Rope"
            DOUBLE_COLON@273..275 "::"
          UPPER_IDENT@275..279 "Leaf"
          SPACE@279..280 " "
          IDENT@280..284 "leaf"
          SPACE@284..285 " "
        FAT_ARROW@285..287 "=>"
        SPACE@287..288 " "
        EBlock@288..301
          L_BRACE@288..289 "{"
          SPACE@289..290 " "
          DExpr@290..300
            EStructIdx@290..300
              EVar@290..294
                IDENT@290..294 "leaf"
              DOT@294..295 "."
              IDENT@295..299 "char"
              SPACE@299..300 " "
          R_BRACE@300..301 "}"
      COMMA@301..302 ","
      EMatchBranch@302..352
        PatVariant@302..321
          Qualifier@302..311
            LINEFEED@302..303 "\n"
            SPACE@303..305 "  "
            UPPER_IDENT@305..309 "Rope"
            DOUBLE_COLON@309..311 "::"
          UPPER_IDENT@311..315 "Node"
          SPACE@315..316 " "
          IDENT@316..320 "node"
          SPACE@320..321 " "
        FAT_ARROW@321..323 "=>"
        SPACE@323..324 " "
        EBlock@324..352
          L_BRACE@324..325 "{"
          SPACE@325..326 " "
          DExpr@326..351
            EBinary@326..351
              EStructIdx@326..340
                EVar@326..330
                  IDENT@326..330 "node"
                DOT@330..331 "."
                IDENT@331..339 "children"
                SPACE@339..340 " "
              BinOp@340..342
                PLUS@340..341 "+"
                SPACE@341..342 " "
              EStructIdx@342..351
                EVar@342..346
                  IDENT@342..346 "node"
                DOT@346..347 "."
                IDENT@347..350 "len"
                SPACE@350..351 " "
          R_BRACE@351..352 "}"
      COMMA@352..353 ","
      LINEFEED@353..354 "\n"
      R_BRACE@354..355 "}"
