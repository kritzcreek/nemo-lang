---
source: packages/frontend/tests/parser.rs
expression: output
input_file: packages/frontend/tests/passing/toplevel.nemo
---
let _ = {};
let _ = {1};
let _ = {
    1;
    x;
    2
};


---
Root@0..58
  TopLet@0..12
    LINEFEED@0..1 "\n"
    LET_KW@1..4 "let"
    SPACE@4..5 " "
    IDENT@5..6 "_"
    SPACE@6..7 " "
    EQUALS@7..8 "="
    SPACE@8..9 " "
    EBlock@9..11
      L_BRACE@9..10 "{"
      R_BRACE@10..11 "}"
    SEMICOLON@11..12 ";"
  TopLet@12..25
    LINEFEED@12..13 "\n"
    LET_KW@13..16 "let"
    SPACE@16..17 " "
    IDENT@17..18 "_"
    SPACE@18..19 " "
    EQUALS@19..20 "="
    SPACE@20..21 " "
    EBlock@21..24
      L_BRACE@21..22 "{"
      DExpr@22..23
        ELit@22..23
          LitInt@22..23
            INT_LIT@22..23 "1"
      R_BRACE@23..24 "}"
    SEMICOLON@24..25 ";"
  TopLet@25..58
    LINEFEED@25..26 "\n"
    LET_KW@26..29 "let"
    SPACE@29..30 " "
    IDENT@30..31 "_"
    SPACE@31..32 " "
    EQUALS@32..33 "="
    SPACE@33..34 " "
    EBlock@34..57
      L_BRACE@34..35 "{"
      DExpr@35..41
        ELit@35..41
          LitInt@35..41
            LINEFEED@35..36 "\n"
            SPACE@36..40 "    "
            INT_LIT@40..41 "1"
      SEMICOLON@41..42 ";"
      DExpr@42..48
        EVar@42..48
          LINEFEED@42..43 "\n"
          SPACE@43..47 "    "
          IDENT@47..48 "x"
      SEMICOLON@48..49 ";"
      DExpr@49..55
        ELit@49..55
          LitInt@49..55
            LINEFEED@49..50 "\n"
            SPACE@50..54 "    "
            INT_LIT@54..55 "2"
      LINEFEED@55..56 "\n"
      R_BRACE@56..57 "}"
    SEMICOLON@57..58 ";"
