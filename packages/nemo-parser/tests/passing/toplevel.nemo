let _ = 0;
let _ = 4242;
let _ = true;
let _ = false;
let _ = 0.0;
let _ = 0.1234;
let _ = 1234.1234;

---

let _ : i32 = 0;
let _ : f32 = 0;
let _ : bool = 0;
let _ : unit = 0;
let _ : Struct = 0;
let _ : [i32] = 0;
let _ : [[Struct]] = 0;
let _ : fn() -> unit = 0;
let _ : fn(i32) -> f32 = 0;
let _ : fn(i32, f32, fn(i32) -> i32) -> f32 = 0;

---

let _ = [];
let _ = [1];
let _ = [1, 2];
let _ = [1, 2,];
let _ = [[1], []];

---

let _ = x[1];
let _ = x[x[x]];
let _ = [1, 2][0];
let _ = [[1]][0][0];

---

let _ = Vec { };
let _ = Vec { x = 10 };
let _ = Vec { x = 10, y = 1.0 };
let _ = Vec { x = 10, y = 1.0, };

---

let _ = v.x;
let _ = v.x.y;
let _ = v[0].y;

---

let _ = f();
let _ = f(1);
let _ = f(1, 2,);
let _ = f(1, f(2));
let _ = x.f();
let _ = x[1].f();
let _ = f(1)(x);

---

let _ = @array_len([]);
let _ = @array_new(1, 2);

---

let _ = if true { 1 } else { 3 };

---

let _ = {};
let _ = {1};
let _ = {
    1;
    x;
    2
};

---

let _ = 1 + 1;
let _ = 1 + 1 + 1;
let _ = 1 * 1 + 1;
let _ = 1 + 1 * 1;
let _ = 1 <= 2 && 1 < 1 || 1 >= 3 && 3 > 4 || 1 == 1 || 1 != 2;
let _ = 1 + x.y;
let _ = f32_abs(delta_x) > f32_abs(delta_y);

---

let _ = {
    let x = 1;
    let y : i32 = 10;
    set x = 1;
    set x[0] = 1;
    set x.y = 1;
    while x {
      1;
      2
    };
};

---
import internal : fn (i32, f32) -> i32 from external

struct Vec {
  x : f32,
  y : f32,
}

let x = 10;
let y : f32 = 10.0;

fn main() = {

}

fn add(x : i32, y : i32) : i32 = {
    x + y
}
---
