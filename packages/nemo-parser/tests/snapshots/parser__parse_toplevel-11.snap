---
source: packages/nemo-parser/tests/parser.rs
expression: output
input_file: packages/nemo-parser/tests/passing/toplevel.nemo
---

let _ = 1 + 1;
let _ = 1 + 1 + 1;
let _ = 1 * 1 + 1;
let _ = 1 + 1 * 1;
let _ = 1 <= 2 && 1 < 1 || 1 >= 3 && 3 > 4 || 1 == 1 || 1 != 2;
let _ = 1 + x.y;
let _ = f32_abs(delta_x) > f32_abs(delta_y);


---
Root@0..198
  TopLet@0..15
    LINEFEED@0..1 "\n"
    LET_KW@1..4 "let"
    SPACE@4..5 " "
    IDENT@5..6 "_"
    SPACE@6..7 " "
    EQUALS@7..8 "="
    SPACE@8..9 " "
    EBinary@9..14
      ELit@9..11
        LitInt@9..11
          INT_LIT@9..10 "1"
          SPACE@10..11 " "
      BinOp@11..13
        PLUS@11..12 "+"
        SPACE@12..13 " "
      ELit@13..14
        LitInt@13..14
          INT_LIT@13..14 "1"
    SEMICOLON@14..15 ";"
  TopLet@15..34
    LINEFEED@15..16 "\n"
    LET_KW@16..19 "let"
    SPACE@19..20 " "
    IDENT@20..21 "_"
    SPACE@21..22 " "
    EQUALS@22..23 "="
    SPACE@23..24 " "
    EBinary@24..33
      ELit@24..26
        LitInt@24..26
          INT_LIT@24..25 "1"
          SPACE@25..26 " "
      BinOp@26..28
        PLUS@26..27 "+"
        SPACE@27..28 " "
      EBinary@28..33
        ELit@28..30
          LitInt@28..30
            INT_LIT@28..29 "1"
            SPACE@29..30 " "
        BinOp@30..32
          PLUS@30..31 "+"
          SPACE@31..32 " "
        ELit@32..33
          LitInt@32..33
            INT_LIT@32..33 "1"
    SEMICOLON@33..34 ";"
  TopLet@34..53
    LINEFEED@34..35 "\n"
    LET_KW@35..38 "let"
    SPACE@38..39 " "
    IDENT@39..40 "_"
    SPACE@40..41 " "
    EQUALS@41..42 "="
    SPACE@42..43 " "
    EBinary@43..52
      EBinary@43..49
        ELit@43..45
          LitInt@43..45
            INT_LIT@43..44 "1"
            SPACE@44..45 " "
        BinOp@45..47
          STAR@45..46 "*"
          SPACE@46..47 " "
        ELit@47..49
          LitInt@47..49
            INT_LIT@47..48 "1"
            SPACE@48..49 " "
      BinOp@49..51
        PLUS@49..50 "+"
        SPACE@50..51 " "
      ELit@51..52
        LitInt@51..52
          INT_LIT@51..52 "1"
    SEMICOLON@52..53 ";"
  TopLet@53..72
    LINEFEED@53..54 "\n"
    LET_KW@54..57 "let"
    SPACE@57..58 " "
    IDENT@58..59 "_"
    SPACE@59..60 " "
    EQUALS@60..61 "="
    SPACE@61..62 " "
    EBinary@62..71
      ELit@62..64
        LitInt@62..64
          INT_LIT@62..63 "1"
          SPACE@63..64 " "
      BinOp@64..66
        PLUS@64..65 "+"
        SPACE@65..66 " "
      EBinary@66..71
        ELit@66..68
          LitInt@66..68
            INT_LIT@66..67 "1"
            SPACE@67..68 " "
        BinOp@68..70
          STAR@68..69 "*"
          SPACE@69..70 " "
        ELit@70..71
          LitInt@70..71
            INT_LIT@70..71 "1"
    SEMICOLON@71..72 ";"
  TopLet@72..136
    LINEFEED@72..73 "\n"
    LET_KW@73..76 "let"
    SPACE@76..77 " "
    IDENT@77..78 "_"
    SPACE@78..79 " "
    EQUALS@79..80 "="
    SPACE@80..81 " "
    EBinary@81..135
      EBinary@81..88
        ELit@81..83
          LitInt@81..83
            INT_LIT@81..82 "1"
            SPACE@82..83 " "
        BinOp@83..86
          R_ANGLE_EQ@83..85 "<="
          SPACE@85..86 " "
        ELit@86..88
          LitInt@86..88
            INT_LIT@86..87 "2"
            SPACE@87..88 " "
      BinOp@88..91
        ANDAND@88..90 "&&"
        SPACE@90..91 " "
      EBinary@91..135
        EBinary@91..107
          EBinary@91..97
            ELit@91..93
              LitInt@91..93
                INT_LIT@91..92 "1"
                SPACE@92..93 " "
            BinOp@93..95
              L_ANGLE@93..94 "<"
              SPACE@94..95 " "
            ELit@95..97
              LitInt@95..97
                INT_LIT@95..96 "1"
                SPACE@96..97 " "
          BinOp@97..100
            OROR@97..99 "||"
            SPACE@99..100 " "
          EBinary@100..107
            ELit@100..102
              LitInt@100..102
                INT_LIT@100..101 "1"
                SPACE@101..102 " "
            BinOp@102..105
              L_ANGLE_EQ@102..104 ">="
              SPACE@104..105 " "
            ELit@105..107
              LitInt@105..107
                INT_LIT@105..106 "3"
                SPACE@106..107 " "
        BinOp@107..110
          ANDAND@107..109 "&&"
          SPACE@109..110 " "
        EBinary@110..135
          EBinary@110..116
            ELit@110..112
              LitInt@110..112
                INT_LIT@110..111 "3"
                SPACE@111..112 " "
            BinOp@112..114
              R_ANGLE@112..113 ">"
              SPACE@113..114 " "
            ELit@114..116
              LitInt@114..116
                INT_LIT@114..115 "4"
                SPACE@115..116 " "
          BinOp@116..119
            OROR@116..118 "||"
            SPACE@118..119 " "
          EBinary@119..135
            EBinary@119..126
              ELit@119..121
                LitInt@119..121
                  INT_LIT@119..120 "1"
                  SPACE@120..121 " "
              BinOp@121..124
                DOUBLE_EQUALS@121..123 "=="
                SPACE@123..124 " "
              ELit@124..126
                LitInt@124..126
                  INT_LIT@124..125 "1"
                  SPACE@125..126 " "
            BinOp@126..129
              OROR@126..128 "||"
              SPACE@128..129 " "
            EBinary@129..135
              ELit@129..131
                LitInt@129..131
                  INT_LIT@129..130 "1"
                  SPACE@130..131 " "
              BinOp@131..134
                NOT_EQUALS@131..133 "!="
                SPACE@133..134 " "
              ELit@134..135
                LitInt@134..135
                  INT_LIT@134..135 "2"
    SEMICOLON@135..136 ";"
  TopLet@136..153
    LINEFEED@136..137 "\n"
    LET_KW@137..140 "let"
    SPACE@140..141 " "
    IDENT@141..142 "_"
    SPACE@142..143 " "
    EQUALS@143..144 "="
    SPACE@144..145 " "
    EBinary@145..152
      ELit@145..147
        LitInt@145..147
          INT_LIT@145..146 "1"
          SPACE@146..147 " "
      BinOp@147..149
        PLUS@147..148 "+"
        SPACE@148..149 " "
      EStructIdx@149..152
        EVar@149..150
          IDENT@149..150 "x"
        DOT@150..151 "."
        IDENT@151..152 "y"
    SEMICOLON@152..153 ";"
  TopLet@153..198
    LINEFEED@153..154 "\n"
    LET_KW@154..157 "let"
    SPACE@157..158 " "
    IDENT@158..159 "_"
    SPACE@159..160 " "
    EQUALS@160..161 "="
    SPACE@161..162 " "
    EBinary@162..197
      ECall@162..179
        EVar@162..169
          IDENT@162..169 "f32_abs"
        L_PAREN@169..170 "("
        EVar@170..177
          IDENT@170..177 "delta_x"
        R_PAREN@177..178 ")"
        SPACE@178..179 " "
      BinOp@179..181
        R_ANGLE@179..180 ">"
        SPACE@180..181 " "
      ECall@181..197
        EVar@181..188
          IDENT@181..188 "f32_abs"
        L_PAREN@188..189 "("
        EVar@189..196
          IDENT@189..196 "delta_y"
        R_PAREN@196..197 ")"
    SEMICOLON@197..198 ";"

