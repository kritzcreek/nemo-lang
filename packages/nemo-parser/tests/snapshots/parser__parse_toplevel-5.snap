---
source: packages/nemo-parser/tests/parser.rs
expression: output
input_file: packages/nemo-parser/tests/passing/toplevel.nemo
---

let _ = Vec { };
let _ = Vec { x = 10 };
let _ = Vec { x = 10, y = 1.0 };
let _ = Vec { x = 10, y = 1.0, };


---
Root@0..108
  TopLet@0..17
    LINEFEED@0..1 "\n"
    LET_KW@1..4 "let"
    SPACE@4..5 " "
    IDENT@5..6 "_"
    SPACE@6..7 " "
    EQUALS@7..8 "="
    SPACE@8..9 " "
    EStruct@9..16
      UPPER_IDENT@9..12 "Vec"
      SPACE@12..13 " "
      L_BRACE@13..14 "{"
      SPACE@14..15 " "
      R_BRACE@15..16 "}"
    SEMICOLON@16..17 ";"
  TopLet@17..41
    LINEFEED@17..18 "\n"
    LET_KW@18..21 "let"
    SPACE@21..22 " "
    IDENT@22..23 "_"
    SPACE@23..24 " "
    EQUALS@24..25 "="
    SPACE@25..26 " "
    EStruct@26..40
      UPPER_IDENT@26..29 "Vec"
      SPACE@29..30 " "
      L_BRACE@30..31 "{"
      SPACE@31..32 " "
      EStructField@32..39
        IDENT@32..33 "x"
        SPACE@33..34 " "
        EQUALS@34..35 "="
        SPACE@35..36 " "
        ELit@36..39
          LitInt@36..39
            INT_LIT@36..38 "10"
            SPACE@38..39 " "
      R_BRACE@39..40 "}"
    SEMICOLON@40..41 ";"
  TopLet@41..74
    LINEFEED@41..42 "\n"
    LET_KW@42..45 "let"
    SPACE@45..46 " "
    IDENT@46..47 "_"
    SPACE@47..48 " "
    EQUALS@48..49 "="
    SPACE@49..50 " "
    EStruct@50..73
      UPPER_IDENT@50..53 "Vec"
      SPACE@53..54 " "
      L_BRACE@54..55 "{"
      SPACE@55..56 " "
      EStructField@56..62
        IDENT@56..57 "x"
        SPACE@57..58 " "
        EQUALS@58..59 "="
        SPACE@59..60 " "
        ELit@60..62
          LitInt@60..62
            INT_LIT@60..62 "10"
      COMMA@62..63 ","
      SPACE@63..64 " "
      EStructField@64..72
        IDENT@64..65 "y"
        SPACE@65..66 " "
        EQUALS@66..67 "="
        SPACE@67..68 " "
        ELit@68..72
          LitFloat@68..72
            FLOAT_LIT@68..71 "1.0"
            SPACE@71..72 " "
      R_BRACE@72..73 "}"
    SEMICOLON@73..74 ";"
  TopLet@74..108
    LINEFEED@74..75 "\n"
    LET_KW@75..78 "let"
    SPACE@78..79 " "
    IDENT@79..80 "_"
    SPACE@80..81 " "
    EQUALS@81..82 "="
    SPACE@82..83 " "
    EStruct@83..107
      UPPER_IDENT@83..86 "Vec"
      SPACE@86..87 " "
      L_BRACE@87..88 "{"
      SPACE@88..89 " "
      EStructField@89..95
        IDENT@89..90 "x"
        SPACE@90..91 " "
        EQUALS@91..92 "="
        SPACE@92..93 " "
        ELit@93..95
          LitInt@93..95
            INT_LIT@93..95 "10"
      COMMA@95..96 ","
      SPACE@96..97 " "
      EStructField@97..104
        IDENT@97..98 "y"
        SPACE@98..99 " "
        EQUALS@99..100 "="
        SPACE@100..101 " "
        ELit@101..104
          LitFloat@101..104
            FLOAT_LIT@101..104 "1.0"
      COMMA@104..105 ","
      SPACE@105..106 " "
      R_BRACE@106..107 "}"
    SEMICOLON@107..108 ";"

