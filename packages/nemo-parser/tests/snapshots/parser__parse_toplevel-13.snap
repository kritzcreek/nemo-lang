---
source: packages/nemo-parser/tests/parser.rs
expression: output
input_file: packages/nemo-parser/tests/passing/toplevel.nemo
---

import internal : fn (i32, f32) -> i32 from external

struct Vec {
  x : f32,
  y : f32,
}

let x = 10;
let y : f32 = 10.0;

fn main() = {

}

fn add(x : i32, y : i32) : i32 = {
    x + y
}

---
Root@0..136
  TopImport@0..53
    LINEFEED@0..1 "\n"
    IMPORT_KW@1..7 "import"
    SPACE@7..8 " "
    ImpInternal@8..17
      IDENT@8..16 "internal"
      SPACE@16..17 " "
    COLON@17..18 ":"
    SPACE@18..19 " "
    TyFn@19..40
      FN_KW@19..21 "fn"
      SPACE@21..22 " "
      TyArgList@22..33
        L_PAREN@22..23 "("
        TyInt@23..26
          I32_BUILTIN@23..26 "i32"
        COMMA@26..27 ","
        SPACE@27..28 " "
        TyFloat@28..31
          F32_BUILTIN@28..31 "f32"
        R_PAREN@31..32 ")"
        SPACE@32..33 " "
      ARROW@33..35 "->"
      SPACE@35..36 " "
      TyInt@36..40
        I32_BUILTIN@36..39 "i32"
        SPACE@39..40 " "
    FROM_KW@40..44 "from"
    SPACE@44..45 " "
    ImpExternal@45..53
      IDENT@45..53 "external"
  TopStruct@53..91
    LINEFEED@53..54 "\n"
    LINEFEED@54..55 "\n"
    STRUCT_KW@55..61 "struct"
    SPACE@61..62 " "
    UPPER_IDENT@62..65 "Vec"
    SPACE@65..66 " "
    L_BRACE@66..67 "{"
    StructField@67..77
      LINEFEED@67..68 "\n"
      SPACE@68..70 "  "
      IDENT@70..71 "x"
      SPACE@71..72 " "
      COLON@72..73 ":"
      SPACE@73..74 " "
      TyFloat@74..77
        F32_BUILTIN@74..77 "f32"
    COMMA@77..78 ","
    StructField@78..88
      LINEFEED@78..79 "\n"
      SPACE@79..81 "  "
      IDENT@81..82 "y"
      SPACE@82..83 " "
      COLON@83..84 ":"
      SPACE@84..85 " "
      TyFloat@85..88
        F32_BUILTIN@85..88 "f32"
    COMMA@88..89 ","
    LINEFEED@89..90 "\n"
    R_BRACE@90..91 "}"
  TopLet@91..104
    LINEFEED@91..92 "\n"
    LINEFEED@92..93 "\n"
    LET_KW@93..96 "let"
    SPACE@96..97 " "
    IDENT@97..98 "x"
    SPACE@98..99 " "
    EQUALS@99..100 "="
    SPACE@100..101 " "
    ELit@101..103
      LitInt@101..103
        INT_LIT@101..103 "10"
    SEMICOLON@103..104 ";"
  TopLet@104..124
    LINEFEED@104..105 "\n"
    LET_KW@105..108 "let"
    SPACE@108..109 " "
    IDENT@109..110 "y"
    SPACE@110..111 " "
    COLON@111..112 ":"
    SPACE@112..113 " "
    TyFloat@113..117
      F32_BUILTIN@113..116 "f32"
      SPACE@116..117 " "
    EQUALS@117..118 "="
    SPACE@118..119 " "
    ELit@119..123
      LitFloat@119..123
        FLOAT_LIT@119..123 "10.0"
    SEMICOLON@123..124 ";"
  TopFn@124..136
    LINEFEED@124..125 "\n"
    LINEFEED@125..126 "\n"
    FN_KW@126..128 "fn"
    SPACE@128..129 " "
    IDENT@129..133 "main"
    L_PAREN@133..134 "("
    R_PAREN@134..135 ")"
    SPACE@135..136 " "

