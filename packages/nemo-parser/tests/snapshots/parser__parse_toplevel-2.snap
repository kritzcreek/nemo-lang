---
source: packages/nemo-parser/tests/parser.rs
expression: output
input_file: packages/nemo-parser/tests/passing/toplevel.nemo
---

let _ : i32 = 0;
let _ : f32 = 0;
let _ : bool = 0;
let _ : unit = 0;
let _ : Struct = 0;
let _ : [i32] = 0;
let _ : [[Struct]] = 0;
let _ : fn() -> unit = 0;
let _ : fn(i32) -> f32 = 0;
let _ : fn(i32, f32, fn(i32) -> i32) -> f32 = 0;


---
Root@0..236
  TopLet@0..17
    LINEFEED@0..1 "\n"
    LET_KW@1..4 "let"
    SPACE@4..5 " "
    IDENT@5..6 "_"
    SPACE@6..7 " "
    COLON@7..8 ":"
    SPACE@8..9 " "
    TyInt@9..13
      I32_BUILTIN@9..12 "i32"
      SPACE@12..13 " "
    EQUALS@13..14 "="
    SPACE@14..15 " "
    ELit@15..16
      LitInt@15..16
        INT_LIT@15..16 "0"
    SEMICOLON@16..17 ";"
  TopLet@17..34
    LINEFEED@17..18 "\n"
    LET_KW@18..21 "let"
    SPACE@21..22 " "
    IDENT@22..23 "_"
    SPACE@23..24 " "
    COLON@24..25 ":"
    SPACE@25..26 " "
    TyFloat@26..30
      F32_BUILTIN@26..29 "f32"
      SPACE@29..30 " "
    EQUALS@30..31 "="
    SPACE@31..32 " "
    ELit@32..33
      LitInt@32..33
        INT_LIT@32..33 "0"
    SEMICOLON@33..34 ";"
  TopLet@34..52
    LINEFEED@34..35 "\n"
    LET_KW@35..38 "let"
    SPACE@38..39 " "
    IDENT@39..40 "_"
    SPACE@40..41 " "
    COLON@41..42 ":"
    SPACE@42..43 " "
    TyBool@43..48
      BOOL_BUILTIN@43..47 "bool"
      SPACE@47..48 " "
    EQUALS@48..49 "="
    SPACE@49..50 " "
    ELit@50..51
      LitInt@50..51
        INT_LIT@50..51 "0"
    SEMICOLON@51..52 ";"
  TopLet@52..70
    LINEFEED@52..53 "\n"
    LET_KW@53..56 "let"
    SPACE@56..57 " "
    IDENT@57..58 "_"
    SPACE@58..59 " "
    COLON@59..60 ":"
    SPACE@60..61 " "
    TyUnit@61..66
      UNIT_BUILTIN@61..65 "unit"
      SPACE@65..66 " "
    EQUALS@66..67 "="
    SPACE@67..68 " "
    ELit@68..69
      LitInt@68..69
        INT_LIT@68..69 "0"
    SEMICOLON@69..70 ";"
  TopLet@70..90
    LINEFEED@70..71 "\n"
    LET_KW@71..74 "let"
    SPACE@74..75 " "
    IDENT@75..76 "_"
    SPACE@76..77 " "
    COLON@77..78 ":"
    SPACE@78..79 " "
    TyCons@79..86
      UPPER_IDENT@79..85 "Struct"
      SPACE@85..86 " "
    EQUALS@86..87 "="
    SPACE@87..88 " "
    ELit@88..89
      LitInt@88..89
        INT_LIT@88..89 "0"
    SEMICOLON@89..90 ";"
  TopLet@90..109
    LINEFEED@90..91 "\n"
    LET_KW@91..94 "let"
    SPACE@94..95 " "
    IDENT@95..96 "_"
    SPACE@96..97 " "
    COLON@97..98 ":"
    SPACE@98..99 " "
    TyArray@99..105
      L_BRACKET@99..100 "["
      TyInt@100..103
        I32_BUILTIN@100..103 "i32"
      R_BRACKET@103..104 "]"
      SPACE@104..105 " "
    EQUALS@105..106 "="
    SPACE@106..107 " "
    ELit@107..108
      LitInt@107..108
        INT_LIT@107..108 "0"
    SEMICOLON@108..109 ";"
  TopLet@109..133
    LINEFEED@109..110 "\n"
    LET_KW@110..113 "let"
    SPACE@113..114 " "
    IDENT@114..115 "_"
    SPACE@115..116 " "
    COLON@116..117 ":"
    SPACE@117..118 " "
    TyArray@118..129
      L_BRACKET@118..119 "["
      TyArray@119..127
        L_BRACKET@119..120 "["
        TyCons@120..126
          UPPER_IDENT@120..126 "Struct"
        R_BRACKET@126..127 "]"
      R_BRACKET@127..128 "]"
      SPACE@128..129 " "
    EQUALS@129..130 "="
    SPACE@130..131 " "
    ELit@131..132
      LitInt@131..132
        INT_LIT@131..132 "0"
    SEMICOLON@132..133 ";"
  TopLet@133..159
    LINEFEED@133..134 "\n"
    LET_KW@134..137 "let"
    SPACE@137..138 " "
    IDENT@138..139 "_"
    SPACE@139..140 " "
    COLON@140..141 ":"
    SPACE@141..142 " "
    TyFn@142..155
      FN_KW@142..144 "fn"
      L_PAREN@144..145 "("
      R_PAREN@145..146 ")"
      SPACE@146..147 " "
      ARROW@147..149 "->"
      SPACE@149..150 " "
      TyUnit@150..155
        UNIT_BUILTIN@150..154 "unit"
        SPACE@154..155 " "
    EQUALS@155..156 "="
    SPACE@156..157 " "
    ELit@157..158
      LitInt@157..158
        INT_LIT@157..158 "0"
    SEMICOLON@158..159 ";"
  TopLet@159..187
    LINEFEED@159..160 "\n"
    LET_KW@160..163 "let"
    SPACE@163..164 " "
    IDENT@164..165 "_"
    SPACE@165..166 " "
    COLON@166..167 ":"
    SPACE@167..168 " "
    TyFn@168..183
      FN_KW@168..170 "fn"
      L_PAREN@170..171 "("
      TyInt@171..174
        I32_BUILTIN@171..174 "i32"
      R_PAREN@174..175 ")"
      SPACE@175..176 " "
      ARROW@176..178 "->"
      SPACE@178..179 " "
      TyFloat@179..183
        F32_BUILTIN@179..182 "f32"
        SPACE@182..183 " "
    EQUALS@183..184 "="
    SPACE@184..185 " "
    ELit@185..186
      LitInt@185..186
        INT_LIT@185..186 "0"
    SEMICOLON@186..187 ";"
  TopLet@187..236
    LINEFEED@187..188 "\n"
    LET_KW@188..191 "let"
    SPACE@191..192 " "
    IDENT@192..193 "_"
    SPACE@193..194 " "
    COLON@194..195 ":"
    SPACE@195..196 " "
    TyFn@196..232
      FN_KW@196..198 "fn"
      L_PAREN@198..199 "("
      TyInt@199..202
        I32_BUILTIN@199..202 "i32"
      COMMA@202..203 ","
      SPACE@203..204 " "
      TyFloat@204..207
        F32_BUILTIN@204..207 "f32"
      COMMA@207..208 ","
      SPACE@208..209 " "
      TyFn@209..223
        FN_KW@209..211 "fn"
        L_PAREN@211..212 "("
        TyInt@212..215
          I32_BUILTIN@212..215 "i32"
        R_PAREN@215..216 ")"
        SPACE@216..217 " "
        ARROW@217..219 "->"
        SPACE@219..220 " "
        TyInt@220..223
          I32_BUILTIN@220..223 "i32"
      R_PAREN@223..224 ")"
      SPACE@224..225 " "
      ARROW@225..227 "->"
      SPACE@227..228 " "
      TyFloat@228..232
        F32_BUILTIN@228..231 "f32"
        SPACE@231..232 " "
    EQUALS@232..233 "="
    SPACE@233..234 " "
    ELit@234..235
      LitInt@234..235
        INT_LIT@234..235 "0"
    SEMICOLON@235..236 ";"

