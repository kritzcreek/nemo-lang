---
source: packages/nemo-parser/tests/parser.rs
expression: output
input_file: packages/nemo-parser/tests/passing/toplevel.nemo
---

let _ = {
    let x = 1;
    let y : i32 = 10;
    set x = 1;
    set x[0] = 1;
    set x.y = 1;
    while x {
      1;
      2
    };
};


---
Root@0..47
  TopLet@0..10
    LINEFEED@0..1 "\n"
    LET_KW@1..4 "let"
    SPACE@4..5 " "
    IDENT@5..6 "_"
    SPACE@6..7 " "
    EQUALS@7..8 "="
    SPACE@8..9 " "
    EBlock@9..10
      L_BRACE@9..10 "{"
  TopLet@10..25
    LINEFEED@10..11 "\n"
    SPACE@11..15 "    "
    LET_KW@15..18 "let"
    SPACE@18..19 " "
    IDENT@19..20 "x"
    SPACE@20..21 " "
    EQUALS@21..22 "="
    SPACE@22..23 " "
    ELit@23..24
      LitInt@23..24
        INT_LIT@23..24 "1"
    SEMICOLON@24..25 ";"
  TopLet@25..47
    LINEFEED@25..26 "\n"
    SPACE@26..30 "    "
    LET_KW@30..33 "let"
    SPACE@33..34 " "
    IDENT@34..35 "y"
    SPACE@35..36 " "
    COLON@36..37 ":"
    SPACE@37..38 " "
    TyI32@38..42
      I32_BUILTIN@38..41 "i32"
      SPACE@41..42 " "
    EQUALS@42..43 "="
    SPACE@43..44 " "
    ELit@44..46
      LitInt@44..46
        INT_LIT@44..46 "10"
    SEMICOLON@46..47 ";"
=== ERRORS ===

[
    (
        "expected R_BRACE",
        15..18,
    ),
    (
        "expected SEMICOLON",
        15..18,
    ),
]
