---
source: packages/nemo-parser/tests/parser.rs
expression: output
input_file: packages/nemo-parser/tests/passing/toplevel.nemo
---

let _ = f();
let _ = f(1);
let _ = f(1, 2,);
let _ = f(1, f(2));
let _ = x.f();
let _ = x[1].f();
let _ = f(1)(x);


---
Root@0..115
  TopLet@0..13
    LINEFEED@0..1 "\n"
    LET_KW@1..4 "let"
    SPACE@4..5 " "
    IDENT@5..6 "_"
    SPACE@6..7 " "
    EQUALS@7..8 "="
    SPACE@8..9 " "
    ECall@9..12
      EVar@9..10
        IDENT@9..10 "f"
      EArgList@10..12
        L_PAREN@10..11 "("
        R_PAREN@11..12 ")"
    SEMICOLON@12..13 ";"
  TopLet@13..27
    LINEFEED@13..14 "\n"
    LET_KW@14..17 "let"
    SPACE@17..18 " "
    IDENT@18..19 "_"
    SPACE@19..20 " "
    EQUALS@20..21 "="
    SPACE@21..22 " "
    ECall@22..26
      EVar@22..23
        IDENT@22..23 "f"
      EArgList@23..26
        L_PAREN@23..24 "("
        ELit@24..25
          LitInt@24..25
            INT_LIT@24..25 "1"
        R_PAREN@25..26 ")"
    SEMICOLON@26..27 ";"
  TopLet@27..45
    LINEFEED@27..28 "\n"
    LET_KW@28..31 "let"
    SPACE@31..32 " "
    IDENT@32..33 "_"
    SPACE@33..34 " "
    EQUALS@34..35 "="
    SPACE@35..36 " "
    ECall@36..44
      EVar@36..37
        IDENT@36..37 "f"
      EArgList@37..44
        L_PAREN@37..38 "("
        ELit@38..39
          LitInt@38..39
            INT_LIT@38..39 "1"
        COMMA@39..40 ","
        SPACE@40..41 " "
        ELit@41..42
          LitInt@41..42
            INT_LIT@41..42 "2"
        COMMA@42..43 ","
        R_PAREN@43..44 ")"
    SEMICOLON@44..45 ";"
  TopLet@45..65
    LINEFEED@45..46 "\n"
    LET_KW@46..49 "let"
    SPACE@49..50 " "
    IDENT@50..51 "_"
    SPACE@51..52 " "
    EQUALS@52..53 "="
    SPACE@53..54 " "
    ECall@54..64
      EVar@54..55
        IDENT@54..55 "f"
      EArgList@55..64
        L_PAREN@55..56 "("
        ELit@56..57
          LitInt@56..57
            INT_LIT@56..57 "1"
        COMMA@57..58 ","
        SPACE@58..59 " "
        ECall@59..63
          EVar@59..60
            IDENT@59..60 "f"
          EArgList@60..63
            L_PAREN@60..61 "("
            ELit@61..62
              LitInt@61..62
                INT_LIT@61..62 "2"
            R_PAREN@62..63 ")"
        R_PAREN@63..64 ")"
    SEMICOLON@64..65 ";"
  TopLet@65..80
    LINEFEED@65..66 "\n"
    LET_KW@66..69 "let"
    SPACE@69..70 " "
    IDENT@70..71 "_"
    SPACE@71..72 " "
    EQUALS@72..73 "="
    SPACE@73..74 " "
    ECall@74..79
      EStructIdx@74..77
        EVar@74..75
          IDENT@74..75 "x"
        DOT@75..76 "."
        IDENT@76..77 "f"
      EArgList@77..79
        L_PAREN@77..78 "("
        R_PAREN@78..79 ")"
    SEMICOLON@79..80 ";"
  TopLet@80..98
    LINEFEED@80..81 "\n"
    LET_KW@81..84 "let"
    SPACE@84..85 " "
    IDENT@85..86 "_"
    SPACE@86..87 " "
    EQUALS@87..88 "="
    SPACE@88..89 " "
    ECall@89..97
      EStructIdx@89..95
        EArrayIdx@89..93
          EVar@89..90
            IDENT@89..90 "x"
          L_BRACKET@90..91 "["
          ELit@91..92
            LitInt@91..92
              INT_LIT@91..92 "1"
          R_BRACKET@92..93 "]"
        DOT@93..94 "."
        IDENT@94..95 "f"
      EArgList@95..97
        L_PAREN@95..96 "("
        R_PAREN@96..97 ")"
    SEMICOLON@97..98 ";"
  TopLet@98..115
    LINEFEED@98..99 "\n"
    LET_KW@99..102 "let"
    SPACE@102..103 " "
    IDENT@103..104 "_"
    SPACE@104..105 " "
    EQUALS@105..106 "="
    SPACE@106..107 " "
    ECall@107..114
      ECall@107..111
        EVar@107..108
          IDENT@107..108 "f"
        EArgList@108..111
          L_PAREN@108..109 "("
          ELit@109..110
            LitInt@109..110
              INT_LIT@109..110 "1"
          R_PAREN@110..111 ")"
      EArgList@111..114
        L_PAREN@111..112 "("
        EVar@112..113
          IDENT@112..113 "x"
        R_PAREN@113..114 ")"
    SEMICOLON@114..115 ";"

